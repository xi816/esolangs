from pprint import pprint as log

grid = [
[
	[	[">", "δ", "@", "v", " "],
		[" ", " ", ".", "6", " "],
		[" ", " ", "^", "<", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],
],


[
	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],
],


[
	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],
],


[
	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],
],


[
	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],

	[	[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "],
		[" ", " ", " ", " ", " "]],
],


]

x = y = z = w = 0
ptr = "r"
"""
ptr(or pointer) can go
left(< or 'l'), right(> or 'r') (1d),
up(^ or 'u'), down(v or 'd') (2d),
forward(f), backward(b) (3d),
to ana(a), to kata(k) (4d).

"""

Stacks = [ [], [], [], [], [] ]
"""
Stack names:
	1 -- Top of stacks
	2 -- Rod of stacks
	3 -- Sum of stacks
	4 -- Pre of stacks
	5 -- Last of stacks
"""

while grid[w][z][y][x] != "@":
	if grid[w][z][y][x] == "<":
		ptr = "l"
	elif grid[w][z][y][x] == ">":
		ptr = "r"
	elif grid[w][z][y][x] == "^":
		ptr = "u"
	elif grid[w][z][y][x] == "v":
		ptr = "d"
	elif grid[w][z][y][x] == "(":
		ptr = "f"
	elif grid[w][z][y][x] == ")":
		ptr = "b"
	elif grid[w][z][y][x] == "[":
		ptr = "a"
	elif grid[w][z][y][x] == "]":
		ptr = "k"

	# Top of stacks manipulation
	elif grid[w][z][y][x] in "123456789abcdef":
		exec(f"Stacks[-1].append(0x{grid[w][z][y][x]})")
	elif grid[w][z][y][x] == "0":
		Stacks[-1].append(0)
	elif grid[w][z][y][x] in "+-*/%":
		exec(f"Stacks[-1][-2] = Stacks[-1][-2] {grid[w][z][y][x]} Stacks[-1][-1]")
		Stacks[-1].pop()
	elif grid[w][z][y][x] == "$":
		Stacks[-1].append(Stacks[-1][-1])
	elif grid[w][z][y][x] == "#":
		Stacks[-1].pop()
	elif grid[w][z][y][x] == ":":
		Stacks[-1].reverse()

	# Stack of stacks manipulation
	elif grid[w][z][y][x] == "S":
		Stacks[-2], Stacks[-1] = Stacks[-1], Stacks[-2]
	elif grid[w][z][y][x] == "U":
		Stacks.reverse()
	elif grid[w][z][y][x] == "L":
		Stacks[0], Stacks[1], Stacks[2], Stacks[3], Stacks[4] = Stacks[1], Stacks[2], Stacks[3], Stacks[4], Stacks[0]
	elif grid[w][z][y][x] == "R":
		Stacks[0], Stacks[1], Stacks[2], Stacks[3], Stacks[4] = Stacks[4], Stacks[0], Stacks[1], Stacks[2], Stacks[3]
		
	# Through-stack-of-stacks manipulation
	elif grid[w][z][y][x] == "&":
		Stacks[-2].append(Stacks[-1][-1])
		Stacks[-1].pop()
	
	# Input-output commands
	elif grid[w][z][y][x] == ".":
		print(Stacks[-1][-1], end = "")
		Stacks[-1].pop()
	elif grid[w][z][y][x] == ",":
		print(chr(Stacks[-1][-1]), end = "")
		Stacks[-1].pop()

	elif grid[w][z][y][x] == "~":
		Stacks[-1].append(int(input()))
	elif grid[w][z][y][x] == "'":
		if ptr == "l":
			x -= 1
		if ptr == "r":
			x += 1
		if ptr == "u":
			y -= 1
		if ptr == "d":
			y += 1
		if ptr == "f":
			z += 1
		if ptr == "b":
			z -= 1
		if ptr == "a":
			w += 1
		if ptr == "k":
			w -= 1
		Stacks[-1].append(ord(grid[w][z][y][x]))

	# Control flow commands
	elif grid[w][z][y][x] == "_":
		if Stacks[-1][-1] != 0:
			ptr = "l"
		else:
			ptr = "r"
		Stacks[-1].pop()
	elif grid[w][z][y][x] == "|":
		if Stacks[-1][-1] != 0:
			ptr = "u"
		else:
			ptr = "d"
		Stacks[-1].pop()
	elif grid[w][z][y][x] == "m":
		if Stacks[-1][-1] != 0:
			ptr = "b"
		else:
			ptr = "f"
		Stacks[-1].pop()
	elif grid[w][z][y][x] == "n":
		if Stacks[-1][-1] != 0:
			ptr = "a"
		else:
			ptr = "k"
		Stacks[-1].pop()
	elif grid[w][z][y][x] == "δ":
		if ptr == "l":
			x -= 1
		if ptr == "r":
			x += 1
		if ptr == "u":
			y -= 1
		if ptr == "d":
			y += 1
		if ptr == "f":
			z += 1
		if ptr == "b":
			z -= 1
		if ptr == "a":
			w += 1
		if ptr == "k":
			w -= 1
	elif grid[w][z][y][x] == "θ":
		Stack[-1][-1] == Stack[-1][-1] ** 2

	#print(Stacks)

	# Movement of pointer
	if ptr == "l":
		x -= 1
	if ptr == "r":
		x += 1
	if ptr == "u":
		y -= 1
	if ptr == "d":
		y += 1
	if ptr == "f":
		z += 1
	if ptr == "b":
		z -= 1
	if ptr == "a":
		w += 1
	if ptr == "k":
		w -= 1